# Kitsugi
Kitsugi is a Python toolkit for content-addressing, analyzing, and reconstructing structured data from fragmented files.

It acts as a "digital archaeologist," allowing you to take a directory of fragmented or related JSON files and transform them into a fully traceable, content-addressable database. This enables you to understand how data fragments are related, reconstruct complete "conceptual" documents from these fragments, and analyze the provenance of your data.

-----
## üèõÔ∏è Core Concepts

Kitsugi is built on a few key architectural principles:

  * **Hierarchical Hashing**: Every piece of data‚Äîfrom a single string to a complex nested object‚Äîis given a unique SHA256 hash. This is performed by a single, universal hashing function.
  * **The Content Graph**: The relationships between parent and child hashes are stored in a simple SQLite graph database (`hash_graph` table), representing all structural relationships.
  * **Declarative Repository**: All interactions with the database are handled by a universal `execute` method that accepts a declarative request dictionary. Commands describe the data they need; the repository retrieves it.

-----
## üöÄ Installation

`kitsugi` is designed to be run as a standalone toolkit with no external dependencies beyond a standard Python 3 installation.

1.  Clone the repository to your local machine.
2.  Navigate into the `kitsugi` directory.
3.  Run the tool directly via the `kitsugi` script.

-----
## üìñ Usage

All interaction with Kitsugi is performed through the `kitsugi` command-line interface.

**General Syntax:**
`python3 kitsugi [command] [options...]`

An SQLite database file (`content_addressing.db` by default) will be created in your current directory to store the content graph.

### Command Reference

{{COMMAND_REFERENCE}}

-----
## üí° Example Workflow

Here is a typical workflow for using Kitsugi:

1.  **Process a Directory**: Ingest a folder of JSON files into the database.
    ```bash
    python3 kitsugi process ./path/to/your/json_files
    ```
2.  **Splice Documents**: Analyze the graph to find the top-level documents.
    ```bash
    python3 kitsugi splice
    ```
    This will report the names of discovered documents, such as `doc_1`.
3.  **Export a Document**: Reconstruct a complete document and save it to a file.
    ```bash
    python3 kitsugi export doc_1 > reconstructed_document.json
    ```
4.  **Analyze Provenance**: Find out which original files were used to create your reconstructed document.
    ```bash
    python3 kitsugi find-sources reconstructed_document.json
    ```

-----
## ‚öñÔ∏è License

This project is licensed under the Apache License 2.0.
